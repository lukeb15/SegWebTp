using HacForo.Mappers;
using HacForo.Models;
using HacForo.Models.DTOs;
using System;
using System.Collections.Generic;
using System.Data.Entity.Validation;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.Security;

namespace HacForo.Controllers
{
    public class UserController : Controller
    {
        private IMapper<User, RegistrationDTO> RegistrationMap { set; get; }
        private IMapper<User, UserDTO>UserMap { set; get; }

        public UserController()
        {
            RegistrationMap = new RegistrationMapper();
            UserMap = new UserMapper();
        }

        public ActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public ActionResult LogIn()
        {
            return View();
        }

        [HttpPost]
        public ActionResult LogIn(LoginDTO loginDTO, HttpResponseBase response)
        {
            if (IsValid(loginDTO.Email, loginDTO.Password))
            {
                using (var db = new Models.HacForoContainer())
                {
                    User userData = db.UserSet.Where(u => u.Email == loginDTO.Email).Single();

                    string encTicket = GetAuthTicket(loginDTO, userData);

                    response.Cookies.Add(new HttpCookie(FormsAuthentication.FormsCookieName, encTicket));
                    response.Cookies.Add(new HttpCookie("UserData", userJson));
                }

                return RedirectToAction("Index", "Home");
            }
            else
            {
                ModelState.AddModelError("", "Login details are wrong.");
            }

            return View();
        }

        private static string GetAuthTicket(LoginDTO loginDTO, User userData)
        {
            FormsAuthenticationTicket authTicket = new
                 FormsAuthenticationTicket(1, //version
                 loginDTO.Email, // user name
                 DateTime.Now,             //creation
                 DateTime.Now.AddMinutes(30), //Expiration (you can set it to 1 month
                 true,  //Persistent
                 userData.Id.ToString()); // additional informations

            string encTicket = FormsAuthentication.Encrypt(authTicket);
            return encTicket;
        }

        [HttpGet]
        public ActionResult Register()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Register(RegistrationDTO registrationDTO)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    using (var db = new Models.HacForoContainer())
                    {                   
                        db.UserSet.Add(RegistrationMap.MapTo(registrationDTO));
                        db.SaveChanges();
                        return RedirectToAction("Index", "Home");
                    }
                }
                else
                {
                    ModelState.AddModelError("", "Data is not correct");
                }
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                        eve.Entry.Entity.GetType().Name, eve.Entry.State);
                    foreach (var ve in eve.ValidationErrors)
                    {
                        Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                            ve.PropertyName, ve.ErrorMessage);
                    }
                }
                throw;
            }
            return View();
        }

        public ActionResult LogOut(HttpSessionStateBase session, HttpResponseBase response)
        {
            // Delete the user details from cache.
            session.Abandon();
            // Delete the authentication ticket and sign out.
            FormsAuthentication.SignOut();
            // Clear authentication cookie.
            HttpCookie cookie = new HttpCookie(FormsAuthentication.FormsCookieName, "");
            cookie.Expires = DateTime.Now.AddYears(-1);
            response.Cookies.Add(cookie);

            return RedirectToAction("Index", "Home");
        }

        private bool IsValid(string email, string password)
        {
            var crypto = new SimpleCrypto.PBKDF2();
            bool IsValid = false;

            using (var db = new Models.HacForoContainer())
            {
                var user = db.UserSet.FirstOrDefault(u => u.Email == email);
                if (user != null)
                {
                    if (user.Password == crypto.Compute(password, user.PasswordSalt))
                    {
                        IsValid = true;
                    }
                }
            }
            return IsValid;
        }
    }
}
